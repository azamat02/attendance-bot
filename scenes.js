import {Markup, Scenes} from "telegraf";
import {
    createAdmin,
    createEmployee,
    createOfficeLocation,
    deleteAdmin,
    getAdmins, getAttendance,
    getEmployees,
    getOfficeLocation,
    markAttendance, markLeavingAttendance
} from "./store/functions.js";

function isMarkedToday(attendance, from) {
    let res = {
        isMarkedToday: false,
        attendance: []
    }
    attendance.forEach(attendance => {
        if (from.username === attendance.user.username && +from.id === +attendance.user.id) {
            let comingTime = new Date(+attendance.comingTime.seconds * 1000)
            if (comingTime.getDate() === new Date().getDate()) {
                res.isMarkedToday = true
                res.attendance = attendance
            }
        }
    })
    return res
}

function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
    let R = 6371; // Radius of the earth in km
    let dLat = deg2rad(lat2-lat1);  // deg2rad below
    let dLon = deg2rad(lon2-lon1);
    let a =
        Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
        Math.sin(dLon/2) * Math.sin(dLon/2)
    ;
    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    let d = R * c; // Distance in km
    return d;
}

function deg2rad(deg) {
    return deg * (Math.PI/180)
}

export class UserScenesGenerator{
    UserButtons() {
        const userButtons = new Scenes.BaseScene("userButtons")

        userButtons.enter(async (ctx) => {
            await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", Markup.keyboard([
                ["–Ø –ø—Ä–∏—à–µ–ª ‚úåÔ∏è", "–Ø —É—Ö–æ–∂—É üëã"]
            ]))
        })

        userButtons.leave()

        return userButtons
    }

    MarkArrival() {
        const markArrival = new Scenes.BaseScene("markArrival")

        markArrival.enter(async (ctx) => {
            const employees = await getEmployees()
            let isEmployee = false
            let emp = {}
            employees.forEach((employee) => {
                if (employee.username === ctx.message.from.username) {
                    isEmployee = true
                    emp = employee
                }
            })

            let attendance = await getAttendance()
            let isMarked = isMarkedToday(attendance, ctx.message.from).isMarkedToday

            if (isEmployee) {
                if (!isMarked) {
                    await ctx.reply("–í—ã —Å–µ–≥–æ–¥–Ω—è –Ω–µ –æ—Ç–º–µ—á–∞–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ", Markup.keyboard([
                        Markup.button.locationRequest("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
                    ]).resize().oneTime())
                }
                if (isMarked) {
                    await ctx.reply("–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å ‚úÖ")
                }
            } else {
                await ctx.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –°–∞–ø–∞")
            }
        })

        markArrival.on("location", async (ctx) => {
            const locations = await getOfficeLocation()
            const officeLatitude = locations[0].latitude
            const officeLongitude = locations[0].longitude
            const { latitude, longitude } = ctx.message.location
            let distance = getDistanceFromLatLonInKm(officeLatitude, officeLongitude, latitude, longitude) * 1000
            if (distance <= 10) {
                await markAttendance({
                    user: ctx.message.from,
                    comingTime: new Date()
                })
                await ctx.reply("–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å ‚úÖ")
            } else {
                await ctx.reply("–í—ã –¥–∞–ª–µ–∫–æ –æ—Ç –æ—Ñ–∏—Å–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≤ –æ—Ñ–∏—Å–µ üìç")
                await ctx.scene.enter("check")
            }
        })

        return markArrival
    }

    MarkLeaving() {
        const markLeaving = new Scenes.BaseScene("markLeaving")

        markLeaving.enter(async (ctx) => {
            const employees = await getEmployees()
            let isEmployee = false
            let emp = {}
            employees.forEach((employee) => {
                if (employee.username === ctx.message.from.username) {
                    isEmployee = true
                    emp = employee
                }
            })

            let attendance = await getAttendance()
            let res = isMarkedToday(attendance, ctx.message.from)

            if (isEmployee) {
                if (!res.isMarkedToday) {
                    ctx.scene.leave()
                }
                else if (res.attendance?.leavingTime) {
                    await ctx.reply("–í—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ —É—Ö–æ–¥, —Å–ø–∞—Å–∏–±–æ, —É–¥–∞—á–Ω–æ–≥–æ –í–∞–º –¥–Ω—è ‚úÖ")
                }
                else if (res.isMarkedToday) {
                    await markLeavingAttendance({
                        ...res.attendance,
                        leavingTime: new Date()
                    })
                    await ctx.reply("–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ —É—Ö–æ–¥, —Å–ø–∞—Å–∏–±–æ, —É–¥–∞—á–Ω–æ–≥–æ –í–∞–º –¥–Ω—è ‚úÖ")
                }
            } else {
                await ctx.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –°–∞–ø–∞")
            }
        })

        markLeaving.leave()

        return markLeaving
    }
}

export class AdminScenesGenerator{
    StartScreen() {
        const startScreen = new Scenes.BaseScene("startScreen")

        startScreen.enter(async (ctx) => {
            let keyboard = Markup.keyboard([
                "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–æ–Ω—É –æ—Ñ–∏—Å–∞",
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é",
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ –º–µ—Å—è—Ü",
                "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
                "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞",
                "–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                "–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
            ])
            await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", keyboard)
        })


        startScreen.hears("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", async (ctx) => {
            await ctx.scene.enter("showAdmins")
        })

        startScreen.hears("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", async (ctx) => {
            await ctx.scene.enter("addAdmin")
        })

        startScreen.hears("–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", async (ctx) => {
            await ctx.scene.enter("addEmployee")
        })

        startScreen.hears("–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–æ–Ω—É –æ—Ñ–∏—Å–∞", async (ctx) => {
            await ctx.scene.enter("setOfficeLocation")
        })

        return startScreen
    }

    SetOfficeLocation() {
        const setOfficeLocation = new Scenes.BaseScene("setOfficeLocation")

        setOfficeLocation.enter(async (ctx) => {
            await ctx.replyWithHTML("–î–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º –∑–æ–Ω—É –æ—Ñ–∏—Å–∞ <b>(–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ)</b>\n‚ö†Ô∏è–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è)‚ö†Ô∏è", Markup.keyboard([
                Markup.button.locationRequest("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
            ]).resize().oneTime())
        })

        setOfficeLocation.on("location", async (ctx) => {
            const { latitude, longitude } = ctx.message.location
            await createOfficeLocation({latitude, longitude})
            await ctx.reply("–ó–æ–Ω–∞ –æ—Ñ–∏—Å–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ ‚úÖ")
            await ctx.reply("–í –ø–æ—Å–ª–µ–¥—É—é—â–µ–º –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–¥–∏—É—Å–µ 10 –º–µ—Ç—Ä–æ–≤ —Å —Ç–æ—á–∫–∏ –≥–¥–µ –≤—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∑–æ–Ω—É –æ—Ñ–∏—Å–∞. üìç")
            await ctx.scene.enter("startScreen")
        })

        return setOfficeLocation
    }

    AddEmployee() {
        const addEmployee = new Scenes.BaseScene("addEmployee")
        addEmployee.enter(async (ctx) => {
            await ctx.replyWithPhoto({source: "./assets/example2.png"}, Markup.removeKeyboard())
            await ctx.reply("–í–≤–µ–¥–∏—Ç–µ <b>username</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @): ", {parse_mode: "HTML"})
        })
        addEmployee.on("text", async (ctx) => {
            let employee = {
                username: ctx.message.text
            }
            await createEmployee(employee)
            await ctx.reply("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
            await ctx.scene.enter("startScreen")
        })
        return addEmployee
    }

    ShowEmployees() {
        const showEmployees = new Scenes.BaseScene("showEmployees")
        showEmployees.enter(async (ctx) => {
            await ctx.replyWithPhoto({source: "./assets/example2.png"}, Markup.removeKeyboard())
            await ctx.reply("–í–≤–µ–¥–∏—Ç–µ <b>username</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @): ", {parse_mode: "HTML"})
        })
        showEmployees.on("text", async (ctx) => {
            let employee = {
                username: ctx.message.text
            }
            await createEmployee(employee)
            await ctx.reply("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
            await ctx.scene.enter("startScreen")
        })
        return showEmployees
    }

    ShowAdmins() {
        const showAdmins = new Scenes.BaseScene("showAdmins")
        showAdmins.enter(async (ctx) => {
            const admins = await getAdmins()
            admins.forEach((admin) => {
                ctx.reply(admin.username, Markup.inlineKeyboard([
                    Markup.button.callback("–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ ‚ùå", admin.id)
                ]))
            })
        })
        showAdmins.on("callback_query", async (ctx) => {
            await deleteAdmin(ctx.callbackQuery.data)
            await ctx.reply("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω ‚úÖ")
            await ctx.scene.enter("startScreen")
        })
        return showAdmins
    }

    AddAdmin() {
        const addAdmin = new Scenes.BaseScene("addAdmin")
        addAdmin.enter(async (ctx) => {
            await ctx.replyWithPhoto({source: "./assets/example2.png"}, Markup.removeKeyboard())
            await ctx.reply("–í–≤–µ–¥–∏—Ç–µ <b>username</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @): ", {parse_mode: "HTML"})
        })
        addAdmin.on("text", async (ctx) => {
            let admin = {
                username: ctx.message.text
            }
            await createAdmin(admin)
            await ctx.reply("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
            await ctx.scene.enter("startScreen")
        })
        return addAdmin
    }
}